#!/bin/bash
#
# chkconfig: 3 99 15
# description: Whois Server
#

# Init script for RIPE Database

# Service name
SERVICE=whois

# Variant
VARIANT=${whois.init.variant}

# Email address of operator
OPEREMAIL=${whois.init.operator}

# Send logs to operator
SENDLOGS=${whois.init.sendlogs}

# user to run whois.jar (non-root!)
ROLE_USER=${whois.init.user}

# Base Whois Location
BASEDIR=${whois.init.basedir}

# Configuration location
CONFDIR=$BASEDIR/conf

# Whois Properties file
PROPERTIES=$CONFDIR/whois.properties

# Binary location
BINJAR=$BASEDIR/bin/whois.jar

# Console log location
LOG=$BASEDIR/var/console.log

### JVM to use to start whois
JAVA="java"

### Memory options
MEMARGS=("-Xms1024m" "-Xmx8g")

### JMX Options
JMXARGS=("-Dcom.sun.management.jmxremote"
         "-Dcom.sun.management.jmxremote.authenticate=false"
         "-Dcom.sun.management.jmxremote.port=1099")

### SNMP Options (if needed)
if [[ -e "$CONFDIR/snmp.acl" ]]; then
	SNMPARGS=("-Dcom.sun.management.snmp.port=1666"
	          "-Dcom.sun.management.snmp.acl.file=$CONFDIR/snmp.acl"
	          "-Dcom.sun.management.snmp.interface=0.0.0.0")
fi

### Hazelcast Options
HAZELCASTARGS=("-Dhazelcast.jmx=true"
               "-Dhazelcast.config=$CONFDIR/hazelcast.xml")

### Other Config Options
CONFIGARGS=("-Dwhois.config=$PROPERTIES"
            "-Dlog4j.configuration=file:$CONFDIR/log4j.xml")

### JAR Options
JARARGS=("-jar" "$BINJAR")

### Final assembled command line
COMMAND=("$JAVA" "-D$SERVICE" "-Dwhois.variant=$VARIANT"
         "${MEMARGS[@]}" "${JMXARGS[@]}" "${SNMPARGS[@]}"
         "${HAZELCASTARGS[@]}" "${CONFIGARGS[@]}" "${JARARGS[@]}")

# And what pgrep needs to search for
COMMAND_REGEXP="$JAVA -D${SERVICE}"'.*'" -jar $BINJAR"

##############################################################################################
# become role user (drop root)
if [[ "$UID" -eq 0 ]]; then
	exec su - "$ROLE_USER" -c "$0 $1"
fi

if [[ "$USER" != "$ROLE_USER" ]]; then
    echo "You must run this service as user $ROLE_USER"
    exit 1
fi

. /etc/init.d/functions

# print server status
function print_status() {
	echo -en "\033[2K\rStatus: $(tail -1 $LOG | cut -c-$((COLUMNS-10)) )"
}

##############################################################################################
# get server PID
function server_pid() {
    pgrep -f -u "$ROLE_USER" "$COMMAND_REGEXP"
}

##############################################################################################
# is server running
function server_running() {
    server_pid >/dev/null
}

##############################################################################################
# get server status
function server_up() {
    QUERY_PORT=$(awk -F '=' '$1=="port.query" { print $2 }' $PROPERTIES)
	echo -e "-r -L -T inetnum 193.0.0.1" | socat -,ignoreeof tcp:localhost:${QUERY_PORT},connect-timeout=1 2>/dev/null | grep -q '^inetnum:'
	return $?
}

##############################################################################################
# rotate log file
function rotate_log() {
    local STATEFILE= CONFIGFILE=
    STATEFILE=$(mktemp)
    CONFIGFILE=$(mktemp)
    # Make best attempt to clean up
    trap "rm -f $STATEFILE $CONFIGFILE" RETURN
    (cat <<CONFIG
$LOG {
    rotate 9
    create
    missingok
}
CONFIG
    ) >$CONFIGFILE
    /usr/sbin/logrotate -f -s $STATEFILE $CONFIGFILE 2>/dev/null
}

##############################################################################################
# fatal error notifier
function my_log() {
    echo "$@"
    #echo "[`date +'%y%m%d %H:%M:%S'`] $@" >>$LOG
}

function my_panic() {
    SUBJECT=$1 ; shift
    my_log "$@"
    echo -e "$@" | mail -s "$SUBJECT" "$OPEREMAIL"
    my_log "Email sent to $OPEREMAIL"
}

##############################################################################################
# after the server is started, this function checks if it has come up, and screams if not.
# it also handles the switch to dynamic mode.
function check_server() {
    # give server a chance
    my_log 'Waiting for the server to come up... (If you know what you are doing, hit ESC to skip waiting)'
    local NUM=0 key="" escape=$'\x1b' INTFLAG=

    trap 'INTFLAG=1' INT

    while ! server_up && [[ -n INTFLAG ]]; do
        print_status

        if ! server_running; then
            my_log
            my_log " *** Server terminated early"
            break
        fi

        read -t1 -s -n1 key || ([[ $? == 1 ]] && sleep 1)       # gracefully handle lack of terminal
        if [[ "$key" == "$escape" ]]; then
            my_log
            my_log " *** User cancelled wait at $NUM seconds"
            break
        fi
        NUM=$[NUM+1]
        if [ $NUM -gt 800 ]; then
            # bail out
            my_log
            my_log "Server does not seem to be up after 720 seconds, giving up. Here is the end of ${LOG}:"
            echo '-------------------------------------------------------------------------------------'
            tail -15 $LOG
            echo '-------------------------------------------------------------------------------------'
            break
        fi
    done

    trap - INT

    local RETCODE=
	my_log
	if server_running; then
	    if server_up; then
	        my_log "$SERVICE started successfully."
	        RETCODE=0
	    else
	        my_log "$SERVICE running, but is not ready."
	        RETCODE=4
	    fi
	else
	    my_log "$SERVICE failed to startup."
	    RETCODE=1
	fi

    # record size of console log file
    LOGPOS=$(stat -c %s $LOG)
    return $RETCODE
}

##############################################################################################
# check console log for updates; email differences
function check_log() {
	# kill child sleep process on exit to avoid them stacking up
	trap "pkill -P $BASHPID; exit 0" TERM HUP
	WHOIS_PID=$(server_pid)

	# let whois finish startup
	sleep 3

	while true; do
# TODO: need to find a way to short-circuit this sleep if the server dies in the middle of it....
		sleep 4h &
		wait	# so bash responds to signals, like the one above

		NEWLOGPOS=$(stat -c %s $LOG)
		DIFF=$[NEWLOGPOS-LOGPOS]

		if [[ $DIFF -gt 0 ]]; then
			# we rely on sendmail for sending mail in raw format, as mailx was trying to be smart and
			# switch to base64 encoding randomly, without adding a MIME header - agoston, 2012-03-29
			if [[ $DIFF -gt 40960 ]]; then
				/usr/lib/sendmail -t <<-__EOF__
				To: $OPEREMAIL
				Subject: $HOSTNAME  $SERVICE

				*** SIZE OF NEW ENTRIES SURPASSES 40K, LISTING LAST 200 LINES ONLY

				$(tail -200 $LOG)
				__EOF__
			else
				/usr/lib/sendmail -t <<-__EOF__
				To: $OPEREMAIL
				Subject: $HOSTNAME  $SERVICE

				$(dd if=$LOG bs=1 skip=$LOGPOS count=$[NEWLOGPOS-LOGPOS])
				__EOF__
			fi
		fi
		LOGPOS=$NEWLOGPOS

		# exit if server already exited
		PID=$(server_pid)
		if [[ $PID -ne $WHOIS_PID ]]; then
			exit 1
		fi
	done
}

##############################################################################################
# MAIN
case "$1" in
    start)
        PID=$(server_pid)
        if [[ $PID ]]; then
            echo "$SERVICE is already running"
            exit 1
        fi

        if [[ -e "$PROPERTIES" ]]; then
            echo "Starting $SERVICE..."
            # rotate console.log
            rotate_log
            # start server
            "${COMMAND[@]}" >>$LOG 2>&1 </dev/null &
            # check if server startup successful
            check_server
            STATUS=$?
        else
            echo "Missing properties file: $PROPERTIES"
            STATUS=1
        fi

        echo -n "$SERVICE startup"
        case "$STATUS" in
            1)  # Failed startup
                failed
                echo
                exit 1
                ;;
            0)  # Successful startup
                success
                ;;
            4)  # Possible startup
                passed
                ;;
            *)
                warning
                echo
                echo -n "Unknown server status: [$STATUS]"
                ;;
        esac
        echo
        if [[ "$SENDLOGS" -gt 0 ]]; then
            check_log </dev/null &>/dev/null &
        fi
        ;;
    stop)
        # kill log checker process (if running)
        PID=$(pgrep -f -u "$ROLE_USER" "$0 start")
        if [[ $PID ]]; then
            kill $PID	# also kills sleep
        fi

        # kill jvm
        PID=$(server_pid)
        if [[ $PID ]]; then
            echo " *** If there is a long update running, $SERVICE can take up to 2 hours to exit gracefully!"
            echo -n "Stopping $SERVICE"
            kill $PID
            while true; do
                sleep 1
                echo -n "."
                PID=$(server_pid)
                if ! [[ $PID ]]; then
                    echo
                    break
                fi
            done
        else
            echo "$SERVICE does not seem to be running"
            echo "Running java processes:"
            ps uxww | grep [j]ava
            exit 1
        fi
        ;;
    jmx)
        # drop into JMX console
        PID=$(server_pid)
        if [[ $PID ]]; then
            # only-digits URL is handled specially, as a process id of a JVM to connect to
            java -jar jmxterm-1.0-alpha-4-uber.jar --url $PID
            exit 0
        else
            echo "$SERVICE does not seem to be running"
            exit 1
        fi
        ;;
    threaddump)
        # dump thread state to the console
        PID=$(server_pid)
        if [[ $PID ]]; then
                echo "Sending signal to $SERVICE to dump thread state to console."
                kill -3 $PID
        else
                echo "$SERVICE does not seem to be running"
                exit 1
        fi
        ;;
    restart)
        $0 stop
        $0 start
        ;;
    status)
        if server_running; then
            if server_up; then
                echo "$SERVICE is up and running"
                exit 0
            else
                echo "$SERVICE is running, but not ready"
                exit 4
            fi
        else
            echo "$SERVICE is not running"
            exit 1
        fi
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|jmx|threaddump}"
        exit 1
        ;;
esac

exit 0
